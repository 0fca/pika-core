// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: SingleStreamAggregationLiveAggregation1657086831
    public class SingleStreamAggregationLiveAggregation1657086831 : Marten.Events.Aggregation.SyncLiveAggregatorBase<Pika.Domain.Storage.Entity.Category>
    {
        private readonly Marten.Events.Aggregation.SingleStreamAggregation<Pika.Domain.Storage.Entity.Category> _singleStreamAggregation;

        public SingleStreamAggregationLiveAggregation1657086831(Marten.Events.Aggregation.SingleStreamAggregation<Pika.Domain.Storage.Entity.Category> singleStreamAggregation)
        {
            _singleStreamAggregation = singleStreamAggregation;
        }


        public System.Func<Pika.Domain.Storage.Entity.Category> AggregateBuilder {get; set;}

        public System.Action<Pika.Domain.Storage.Entity.Category, Pika.Domain.Storage.Entity.Event.CategoryCreated> Lambda1 {get; set;}

        public System.Action<Pika.Domain.Storage.Entity.Category, Pika.Domain.Storage.Entity.Event.CategoryModified> Lambda2 {get; set;}


        public override Pika.Domain.Storage.Entity.Category Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, Pika.Domain.Storage.Entity.Category snapshot)
        {
            if (!events.Any()) return null;
            Pika.Domain.Storage.Entity.Category category = null;
            snapshot ??= Create(events[0], session);
            foreach (var @event in events)
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public Pika.Domain.Storage.Entity.Category Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return AggregateBuilder();
        }


        public Pika.Domain.Storage.Entity.Category Apply(Marten.Events.IEvent @event, Pika.Domain.Storage.Entity.Category aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Pika.Domain.Storage.Entity.Event.CategoryCreated> event_CategoryCreated1:
                    Lambda1.Invoke(aggregate, event_CategoryCreated1.Data);
                    break;
                case Marten.Events.IEvent<Pika.Domain.Storage.Entity.Event.CategoryModified> event_CategoryModified2:
                    Lambda2.Invoke(aggregate, event_CategoryModified2.Data);
                    break;
            }

            return aggregate;
        }

    }

    // END: SingleStreamAggregationLiveAggregation1657086831
    
    
    // START: SingleStreamAggregationInlineHandler1657086831
    public class SingleStreamAggregationInlineHandler1657086831 : Marten.Events.Aggregation.AggregationRuntime<Pika.Domain.Storage.Entity.Category, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<Pika.Domain.Storage.Entity.Category, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<Pika.Domain.Storage.Entity.Category, System.Guid> _storage;
        private readonly Marten.Events.Aggregation.SingleStreamAggregation<Pika.Domain.Storage.Entity.Category> _singleStreamAggregation;

        public SingleStreamAggregationInlineHandler1657086831(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<Pika.Domain.Storage.Entity.Category, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<Pika.Domain.Storage.Entity.Category, System.Guid> storage, Marten.Events.Aggregation.SingleStreamAggregation<Pika.Domain.Storage.Entity.Category> singleStreamAggregation) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _singleStreamAggregation = singleStreamAggregation;
        }


        public System.Func<Pika.Domain.Storage.Entity.Category> AggregateBuilder {get; set;}

        public System.Action<Pika.Domain.Storage.Entity.Category, Pika.Domain.Storage.Entity.Event.CategoryCreated> Lambda1 {get; set;}

        public System.Action<Pika.Domain.Storage.Entity.Category, Pika.Domain.Storage.Entity.Event.CategoryModified> Lambda2 {get; set;}


        public override async System.Threading.Tasks.ValueTask<Pika.Domain.Storage.Entity.Category> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<Pika.Domain.Storage.Entity.Category, System.Guid> slice, Marten.Events.IEvent evt, Pika.Domain.Storage.Entity.Category aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<Pika.Domain.Storage.Entity.Event.CategoryCreated> event_CategoryCreated3:
                    aggregate ??= AggregateBuilder();
                    Lambda1.Invoke(aggregate, event_CategoryCreated3.Data);
                    return aggregate;
                case Marten.Events.IEvent<Pika.Domain.Storage.Entity.Event.CategoryModified> event_CategoryModified4:
                    aggregate ??= AggregateBuilder();
                    Lambda2.Invoke(aggregate, event_CategoryModified4.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public Pika.Domain.Storage.Entity.Category Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return AggregateBuilder();
        }

    }

    // END: SingleStreamAggregationInlineHandler1657086831
    
    
}

