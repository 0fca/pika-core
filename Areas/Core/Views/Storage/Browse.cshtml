@using PikaCore.Areas.Core.Controllers.Helpers
@using PikaCore.Areas.Infrastructure.Services
@using PikaCore.Areas.Infrastructure.Services.Helpers
@using PikaCore.Security
@using Microsoft.Extensions.FileProviders
@model FileResultViewModel
@inject UserManager<ApplicationUser> UserManager
@inject IFileService FileService
@inject IdDataProtection DataProtection

@{
    var msg = TempData["returnMessage"];
}

@if(Model?.Contents != null && !Model.Contents.GetType().IsInstanceOfType(typeof(NotFoundDirectoryContents)))
{

    ViewData["Title"] = "Browse";
    var lastPath = ViewData["path"] as string;
    var returnUrl = ViewData["returnUrl"];
    var user = await UserManager.GetUserAsync(Context.User);
    var pageCount = int.Parse(TempData["PageCount"].ToString() ?? "0");
    var offset = int.Parse(TempData["Offset"].ToString() ?? "0");
    var count = int.Parse(TempData["Count"].ToString() ?? "0");
    var directorySeparator = System.IO.Path.DirectorySeparatorChar;
    var paginationData = new Dictionary<string, object> {{"Offset", offset}, {"Count", count}, {"PageCount", pageCount}, {"Last", lastPath}};

    <div class="row">
        <div class="s10 m12 l12 input-field">
            @{
                var splitted = lastPath?.Split(System.IO.Path.DirectorySeparatorChar);
                var last = "";
                var tmp = "/Core/Storage/Browse?path=" + last;

                <a class="teal-text" href="/Core/Storage/Browse/">Browse</a>

                foreach (var part in splitted)
                {
                    if (!string.IsNullOrEmpty(part))
                    {
                        last = System.IO.Path.Combine(last, part);
                        tmp = "/Core/Storage/Browse?path=" + last;
                        <a class="breadcrumb breadcrumb-icon teal-text" href=@tmp>@part</a>
                    }
                }
            }
            <button class="waves-effect waves-teal btn-flat" id="copyButton" onclick="copyToClipboard('helperInput');" type="button"><i class="fas fa-copy"></i></button>
            <input id="helperInput" value="@Context.Request.Host@tmp" class="offscreen" aria-hidden="true"/>
            <input type="text" id="pathField" placeholder="Enter the absolute system path..." class="autocomplete" value="@lastPath" autofocus/>
        </div>
    </div>

    @await Html.PartialAsync("Partial/_PaginationPartial.cshtml", paginationData)

    <div id="file-list" class="collection">
        <div class="row">
            <div class="col s12 l7 m8">
                @{
                    var itemText = @Model.ContentsList.Count == 1 ? "item" : "items";
                }
                <h5 class="center-on-small-only">Found @Model.ContentsList.Count @itemText</h5>
            </div>
            <div class="col s12 m5 l4 right">
                <div class="input-field">
                    <span class="material-icons prefix">
                        search
                    </span>
                    <input type="text" id="searchBox" placeholder="Search" oninput="searchFileList();"/>
                </div>
            </div>
        </div>
        <div class="row">
            <a class="collection-item browse-collection-item transparent" 
               asp-area="Core" 
               asp-controller="Storage" 
               asp-action="Browse" 
               asp-route-path="@returnUrl">..</a>
        </div>
        @{
            if (Model.ContentsList.Count > 0)
            {
                foreach (var item in Model.ContentsList)
                {
                    <div class="row">
                        <div class="col s6 m5 l5 truncate valign-wrapper">
                            @{
                                var viewableName = item.Name.StartsWith("~")
                                    ? item.Name.Replace("~", "")
                                    : item.Name;
                                var dirIcon = item.Name.StartsWith("~") ? "folder" : "folder_shared";
                            }
                            @if (item.IsDirectory)
                            {
                                
                                <a class="collection-item browse-collection-item transparent"
                                   asp-area="Core"
                                   asp-controller="Storage"
                                   asp-action="Browse"
                                   asp-route-path="@System.IO.Path.Combine(lastPath, item.Name)"
                                   title="@viewableName">
                                    <span class="material-icons">
                                        @dirIcon
                                    </span>
                                    
                                    @viewableName
                                </a>
                            }
                            else
                            {
                                var mime = "";
                                mime = MimeAssistant.GetMimeType(item.PhysicalPath);
                                if (!mime.StartsWith("image/")
                                    && !mime.StartsWith("video/"))
                                {
                                    var type = MimeAssistant.RecognizeIconByMime(mime);

                                    <a class="collection-item browse-collection-item transparent" 
                                       asp-area="Core" 
                                       asp-controller="Storage" 
                                       asp-action="Download" 
                                       asp-route-id=@DataProtection.Encode(item.PhysicalPath) 
                                       asp-route-returnUrl=@lastPath title="@viewableName">
                                        <i class="fas fa-@type prefix browse-icon-margin">
                                        </i>
                                        @viewableName
                                        @if (item.Name.StartsWith("~"))
                                        {
                                            <span class="material-icons">
                                                lock
                                            </span>
                                        }
                                    </a>
                                }
                                else
                                {
                                    var id = "1." + lastPath?.Replace("/", "-") + $"-{item.Name}";
                                    <div class="col s3 m1 l1 material-placeholder">
                                        <img class="materialboxed" id="@id" alt="@item.Name" width="48" src="~/images/loading_icon.gif"/>
                                    </div>
                                    <div class="col s5 m7 l7 center-align">
                                        <a class="collection-item browse-collection-item left-align transparent"
                                           asp-area="Core" 
                                           asp-controller="Storage" 
                                           asp-action="Download" 
                                           asp-route-returnUrl="@lastPath" 
                                           asp-route-id=@DataProtection.Encode(item.PhysicalPath) 
                                           title="@item.Name">
                                            @viewableName
                                            @if (item.Name.StartsWith("~"))
                                            {
                                                <span class="material-icons">
                                                    lock
                                                    </span>
                                            }
                                        </a>
                                    </div>
                                }
                            }
                        </div>
                        <div class="col m4 l4 hide-on-small-only">
                            <p>@item.LastModified.Date.ToLongDateString()</p>
                        </div>
                        <div class="col s4 m2 l2">
                            @if (!item.IsDirectory)
                            {
                                <p>@UnixHelper.DetectUnitBySize(item.Length)</p>
                            }
                            else
                            {
                                <p>---</p>
                            }
                        </div>
                        <div class="col s2 m1 l1 opt-font">
                                @{
                                    var model = new Tuple<string, IFileInfo>(lastPath, item);
                                }
                            @await Html.PartialAsync("Partial/_ContextMenuPartial", model)
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="row">
                    <div class="s10 m10 l10">
                        <h4 class="center-align">It is empty in here...</h4>
                    </div>
                </div>
            }
        }
        <div class="row">
            <a class="collection-item browse-collection-item transparent" asp-area="Core" asp-controller="Storage" asp-action="Browse" asp-route-path="@returnUrl">..</a>
        </div>

        <div class="fixed-action-btn">
            <a class="btn-floating btn-large teal-accent">
                <i class="large material-icons">mode_edit</i>
            </a>
            <ul>
                @if (user != null
                     && !(await UserManager.IsInRoleAsync(user, "User")))
                {
                    <li><a data-target="file-editor" class="btn btn-floating modal-trigger"><i class="fas fa-folder-plus"></i></a></li>
                    <li><a class="btn btn-floating" asp-controller="Storage" asp-action="Delete" asp-route-currentPath="@lastPath"><i class="fas fa-trash-alt"></i></a></li>
                }
                <li><a class="btn btn-floating modal-trigger" data-target="upload-modal"><i class="fas fa-upload"></i></a></li>
            </ul>
        </div>

    </div>
    @await Html.PartialAsync("Partial/_PaginationPartial.cshtml", paginationData)

    @await Html.PartialAsync("Partial/_AddDirectoryPartial.cshtml", lastPath)

    @await Html.PartialAsync("Partial/_StatusMessage.cshtml", msg)

    @await Html.PartialAsync("Partial/_UploadPartial.cshtml", lastPath)

@if (TempData["showGenerateUrlPartial"] != null && bool.Parse(TempData["showGenerateUrlPartial"].ToString() ?? string.Empty))
{
    @await Html.PartialAsync("Partial/_GenerateUrlPartial.cshtml")
}

    <script>
@{
    lastPath = !string.IsNullOrEmpty(lastPath) ? lastPath.Replace("\\", "\\\\") : "\\";
}
    const listingPath = "@lastPath";
    const directorySeparator = "@directorySeparator";
    document.getElementById("searchBox").addEventListener("keydown", function (e) {
        if (e.code === "Enter") {
            searchFileList();
        }
    });

    document.getElementById("pathField").addEventListener("keydown", (key) => {
        if (key.code === "Enter") {
            const path = document.getElementById("pathField").value;
            window.location = `/Core/Storage/Browse?path=${path}`;
        }
    });

    document.getElementById("pathField").addEventListener("keyup", (key) => {
        if (key.code === "Slash") {
            const currentPath = document.getElementById("pathField").value;
            requestListing(currentPath);
        }
    });

    document.addEventListener('DOMContentLoaded', function () {
        const elems = document.querySelectorAll('.autocomplete');
        const instances = M.Autocomplete.init(elems, {});
    })
</script>
    <script src="~/js/media.js" asp-append-version="true"></script>
}
else
{
    ViewData["Title"] = "Browse - Error";
    <div class="card-panel red darken-3">
        Błąd.
    </div>
}